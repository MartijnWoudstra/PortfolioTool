<div class="job-status-canvas">
    <div class="row">
        <div class="col-12">
            <h3>Remove items here</h3>
            <ul class="dropzone-canvas @dropClass"
                ondragover="event.preventDefault();"
                @ondrop="() => HandleDrop(Container.Payload)"
                @ondragenter="HandleDragEnter"
                @ondragleave="HandleDragLeave">
            </ul>
        </div>
    </div>
</div>

@code {

    [CascadingParameter] ProjectsContainer Container { get; set; }



    List<ProjectModel> Projects = new List<ProjectModel>();
    string dropClass = "";

    protected override void OnParametersSet()
    {
    }

    private void HandleDragEnter()
    {

        dropClass = "can-drop";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    protected async override Task OnInitializedAsync() {
        Projects = Container.ProjectsPlaced;
    }

    private async Task HandleDrop(ProjectModel model)
    {
        dropClass = "";

        Container.ProjectsPlaced.Remove(model);

        if (Container.DependenciesPlaced.Any(_ => _.Source.Id == model.Id || _.Destination.Id == model.Id)){
            var entries = Container.ProjectDependency.Where(_ => _.Source.Id == model.Id || _.Destination.Id == model.Id);
            foreach (var entry in entries) {
                Container.ProjectDependency.Remove(entry);
            }
        }
        Container.HasChanged();
        //if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status)) return;

        //await Container.UpdateJobAsync(ListStatus);
    }
}
